;; scr/yuck/music.yuck

;; Variables
(deflisten music_time_total "playerctl metadata -f '{{mpris:length / 1000000}}' --follow")
(deflisten music_time_now "playerctl metadata -f '{{position / 1000000}}' --follow")
(deflisten music_time_readable "playerctl metadata -f '{{duration(position)}} / {{duration(mpris:length)}}' --follow")
(deflisten music_time "playerctl --player=spotify metadata -f '{{duration(position)}} / {{duration(mpris:length)}}' --follow")
(defpoll music_cover_color_bg :interval "1s" "head -n1 /tmp/.music_cover_colors")
(defpoll music_cover_color_fg :interval "1s" "tail -n1 /tmp/.music_cover_colors")
(defvar player_vol_reveal false)

;; Widgets
(defwidget music []
  (box
   ;:class "music"
    :class "music"
    :orientation "h"
    :space-evenly false
   ;; :style "background-image: url('${music_cover}');"
   ;; :vexpand false
   ;; (music_vol) ;; volume
    (box
      :orientation "v"
      :space-evenly false
    (box
      :orientation "v"
      :style "color: rgb(${music_cover_color_bg});"
      :space-evenly false
      (box ;; título e artista
        :class "music_artist-title"
        :orientation "v"
        :halign "start"
        :valign "start"
        :spacing 8
        (label
          :halign "start"
          :limit-width 30
          :text music_title)
        (label
          :class "music_artist-title_title"
          :halign "start"
          :text music_author))
      (box ;;tempo e botões
        :orientation "v"
        :valign "end"
        :halign "start"
        :space-evenly false
        (box
          :class "music_buttons"
          :orientation "h"
          :halign "start"
          :valign "end"
          :space-evenly false
          (button :valign "end" :onclick "playerctl --player=spotify previous" "󰒮")
          (button :valign "end" :onclick "playerctl --player=spotify play-pause" {music_status == "Paused" ? "󰐊" : "󰏤"})
          (button :valign "end" :onclick "playerctl --player=spotify next" "󰒭")
          (label
            :class "music_time_text"
            :halign "start"
            :valign "end"
            :space-evenly false
            :text music_time)
    (music_cover)
        )
       ;(label
       ;  :class "music_time_text"
       ;  :halign "start"
       ;  :space-evenly false
       ;  :text music_time)
      )
    ) ;; progress bar do tempo em segundos

    (music_time)
    )
))

(defwidget music_vol []
  (eventbox 
    :class "music_vol"
    :onhover "${EWW_CMD} update player_vol_reveal=true"
    :onhoverlost "${EWW_CMD} update player_vol_reveal=false"
    :visible {player_volume != "" ? true : false}
    (revealer
      :reveal player_vol_reveal
      :transition "slideleft"
      :duration "250ms"
      (scale
        ; :style "& scale trough {color: blue; & highlight background-color: blue;}"
        :value player_volume
        :orientation "v"
        :flipped true
        :min 0
        :max 100
        :active true
        :tooltip "${player_volume}%"
        :onchange "scripts/vol.sh set-player {}"
      )
    )
))

(defwidget music_time []
  (box
    :class "music_time"
    :visible true
    :valign "end"
    (scale
      ; :style "& scale trough {color: blue); & highlight background-color: blue;}}"
      :active false
      :max music_time_total
      :value music_time_now
)))

(defwidget music_cover []
  (box
    :class "music_cover"
    :style "background-image: url('${music_cover}');"
  )
)




;; Main Window
(defwindow music
  ; :monitor "eDP"
  :monitor 0
  :windowtype "normal"
  :stacking "overlay"
  :geometry
    (geometry
      :x "0px" 
      :y "48px"
      :width  "25%"
      :height "22%"
      :anchor "top center")
  (music)
)
