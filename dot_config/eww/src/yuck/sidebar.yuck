;; src/yuck/sidebar.yuck

;; Variables
;(defpoll brightness_percent :interval "1s" 
;  "brightnessctl -m | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll brightness_percent :interval "1s"
  "ddcutil --noverify --bus=9 --sleep-multiplier .0 -t getvcp 10 | awk '{print $4}'")
(defpoll volume :interval "1s" 
  "wpctl get-volume @DEFAULT_SINK@ | awk -F. '{print $2}'")
(defpoll player_volume :interval "1s"
  "scripts/vol.sh get-player")
(defpoll volume_muted :interval "3s"
  "amixer -D pulse sget Master | awk -F'[][]' '/Left:/ { print $4 }'")
(defpoll cpu_freq :interval "3s"
  "scripts/getCPUFreq.sh")
(defpoll gpu_freq :interval "3s"
  "cat /sys/class/hwmon/hwmon1/device/gpu_busy_percent")

;; Widgets
(defwidget bright []
  (box 
    :class "bright"
    :orientation "h"
    :space-evenly false
    ; :spacing 8
    :tooltip "${brightness_percent}%"
    (label :text "󰃝")
    (scale
      :value brightness_percent
      :orientation "h"
      :min 0
      :max 100
      :active true
      :round-digits "1"
      ;; :onchange "light -S {}"
      :onchange "ddcutil --noverify --bus=9 --sleep-multiplier .0 -t setvcp 10 {}"
)))

(defwidget vol []
  (box 
    :class "vol"
    :orientation "h"
    :space-evenly false
    :tooltip "${volume}%"
    (button
      :class {volume_muted == "on" ? "vol_normal" : "vol_muted"}
      :onclick "wpctl set-mute @DEFAULT_SINK@ toggle"
      (label :text {volume_muted == "on" ? "󰕾" : "󰖁"})
    )
    (box
      :class {volume_muted == "on" ? "vol_normal" : "vol_muted"}
      (scale 
        :orientation "h"
        :value volume
        :min 1
        :max 100
        :active true
        :onchange "wpctl set-volume {}%"
))))

(defwidget bright_and_vol []
  (box
    :class "bright_and_vol"
    :orientation "v"
    :spacing -24
    (bright)
    (vol)
))

(defwidget cpu []
  (box
    :class "hw_info"
    :orientation "v"
    :space-evenly false
    (circular-progress
      :class "hw_info_cpu"
      :thickness 8
      :value {EWW_CPU['avg']}
      :tooltip "using ${round(EWW_CPU['avg'],1)}%"
      (label :class "hw_info_icon" :text "󰍛"))
    (label
      :class "hw_info_text"
      :valign "start"
      :text "${round(cpu_freq / 1000,1)} GHz | ${round(EWW_TEMPS.K10TEMP_TCTL,1)}°  ")
))

(defwidget gpu []
  (box
    :class "hw_info"
    :orientation "v"
    :space-evenly false
    (circular-progress
      :class "hw_info_gpu"
      :thickness 8
      :value "${gpu_freq}"
      :tooltip "using ${gpu_freq}%"
      (label :class "hw_info_icon" :text "󱤓"))
    (label
      :class "hw_info_text"
      :valign "start"
      :text "${round(EWW_TEMPS.AMDGPU_EDGE,1)}°")
))



(defwidget ram []
  (box
    :class "hw_info"
    :orientation "v"
    (circular-progress
      :class "hw_info_ram"
      :thickness 8
      :value {EWW_RAM.used_mem_perc}
      :tooltip "using ${round(EWW_RAM.used_mem_perc,1)}%"
      (label :class "hw_info_icon" :text "󰘚"))
    (label :class "hw_info_text" :valign "start" :text "using ${round(EWW_RAM.used_mem / 1000000, 0)} MB")
))


(defwidget hw_info []
  (box
    :orientation "h"
    :spacing 20
    (cpu)
    (ram)
))


; (defvar my-json `{"test1":"rapaiz", "test2":"ui", "test3":"cavalo"}`)

; (defwidget testwidget []
;   (box
;     ; (for entry in my-json
;       ; (button :onclick "notify-send 'click' 'button ${entry}'"
;         ; entry.test1)))
;       (button :onclick "notify-send 'click' 'button ${my-json.test1}'" my-json["test1"])
;   )
; )


(defwidget sidebar []
  (box
    :class "sidebar"
    :orientation "v"
    :spacing 20
    :space-evenly false
    (bright_and_vol)
    (hw_info)
    (gpu)
;   (testwidget)
))

;; Main Window
(defwindow sidebar
  :monitor 0
  :windowtype "dock"
  :stacking "overlay"
  :geometry 
    (geometry
      :x "8px" 
      :y "48px"
      :width "25%"
      :height "35%"
      :anchor "top right")
  (sidebar)
)
