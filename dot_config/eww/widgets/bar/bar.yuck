;; widgets/bar/bar.yuck

;; Variables
; Get current music metadata
(deflisten music_metadata "playerctl --player=spotify metadata -f '{{artist}}: {{title}}' --follow")

; Get Workspaces (BSPWM and Hyprland)
(deflisten bspwm_workspaces "widgets/bar/scripts/bspwm-workspaces.sh")
(deflisten hyprland_workspaces "widgets/bar/scripts/hyprland-workspaces.sh")

; Get weather report every 30 minutes
(defpoll weather_report
  :interval "30m"
  :initial "-273,15°C 💀"
  "widgets/bar/scripts/weather.sh")

; Reveal variables
(defvar memory_reveal false)


;; Widgets
(defwidget clock []
  (box
    :class "clock"
    (button
      :onclick "scripts/pop.sh calendar"
      (label :text "${formattime(EWW_TIME, "%H:%M")}")
)))


(defwidget workspaces []
  (box
    :valign "center"
    (literal :content {get_env("XDG_SESSION_TYPE") == "wayland" ? hyprland_workspaces : bspwm_workspaces})
))


(defwidget weather []
  (box
    :class "weather"
    :visible {weather_report != "" ? true : false}
    (label :text weather_report)
))


(defwidget music []
  (box
    :class "music"
    :visible {music_metadata != "" ? true : false}
    (button
      :onclick "playerctl --player=spotify play-pause"
      music_metadata
)))


(defwidget tray []
  (box
    :class "tray"
    (systray
      :spacing 0
      :orientation "h"
      :space-evenly "false"
      :icon-size 16
)))


(defwidget network []
  (box
    :class "network"
    :visible {get_env("NETWORK_INTERFACE") != "" ? true : false}
    (label :text "${round((EWW_NET["${get_env("NETWORK_INTERFACE")}"]["NET_DOWN"]/1000) + (EWW_NET["${get_env("NETWORK_INTERFACE")}"]["NET_UP"]/1000), 2)} KB/s")
))

(defwidget memory []
  (eventbox
    :onhover "${EWW_CMD} update memory_reveal=true"
    :onhoverlost "${EWW_CMD} update memory_reveal=false"
    :tooltip "${round(((EWW_RAM.used_mem * 100) / EWW_RAM.total_mem), 0)}%"
    (box
      :class "memory"
      :space-evenly false
      :orientation "h"
      (label :text "${round(EWW_RAM.used_mem / 1000000, 0)}")
      (revealer
        :reveal memory_reveal
        :transition "slideright"
        :duration "350ms"
        (box
          :space-evenly false
          (label :style "padding: 0px 4px;" :text "/")
          (label :text "${round(EWW_RAM.total_mem / 1000000, 0)}"))
        )
      (label :style "padding-left: 4px;" :text " MB")
)))

(defwidget battery []
  (box
    :class "battery"
    :orientation "h"
    :space-evenly false
    :visible { EWW_BATTERY != "" ? true : false}
    (label :text "${round(EWW_BATTERY["total_avg"], 2)}%")
    (label :class "icon" :text {EWW_BATTERY["total_avg"] <= 50 ? "󰁼" : "󰁹" })
))


(defwidget left []
  (box
    :class "left"
    :orientation "h"
    :space-evenly false
    :halign "start"
    (clock)
    (workspaces)
    (weather)
))

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    (music)
))

(defwidget right []
  (box
    :class "right"
    :orientation "h"
    :space-evenly false
    :halign "end"
    (tray)
    (network)
    (battery)
    (memory)
))

; Main Widget
(defwidget bar_widget []
  (centerbox
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right)
))


;; Main Window
(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry
    (geometry
      :x "0%"
      :y "0%"
      :width "100%"
      :height "32px"
      :anchor "top center")
  :reserve
    (struts
      :side "top"
      :distance "32px")
  (bar_widget)
)
