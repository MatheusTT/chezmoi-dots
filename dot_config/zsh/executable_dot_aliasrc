#!/usr/bin/env bash

source /home/broa/scripts/colors.conf

## Aliases ##
# Utility commands
alias ls='lsd -X --group-dirs first'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'

alias mkdir='printf "${bold_green}" && mkdir -pv'
alias back='cd $OLDPWD'
alias :q='exit'

# Other commands
alias neo='nvim'
alias bat='bat --number --theme Dracula'
alias cat='bat'
alias wget='wget --hsts-file=${XDG_DATA_HOME}/.wget-hsts'
alias clipboard='wl-copy'
alias ytdl='yt-dlp -f "bv*+ba/b" -o "~/Downloads/%(title)s.%(ext)s"'
alias ytdla='yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 -o "~/Downloads/%(title)s.%(ext)s"'
alias ipman='doas ipman'
alias rm='trash'
alias ip='ip --color=auto'
alias close='killall -s SIGTERM'
alias set-bg='feh --no-fehbg --bg-fill'
alias sticky='flameshot gui -s --pin'
alias gdu='gdu --si'
alias y='yazi'

alias gits='git status'
alias gita='git add'
alias gitd='git diff'
alias gitr='git restore'
alias gitrs='git restore --staged'

giti() {
  echo "$1" >> "$PWD/.gitignore"
}

# poweroff() {
#   while pidof timeshift; do
#     echo "Waiting for Timeshift..."
#     sleep 5
#   done
#   /usr/bin/poweroff
# }

# ranger_cd() {
#     temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
#     ranger --choosedir="$temp_file" -- "${@:-$PWD}"
#     if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
#         cd -- "$chosen_dir"
#     fi
#     rm -f -- "$temp_file"
# }
#
# # This binds Ctrl-O to ranger-cd:
# zle -N ranger_cd
# bindkey "^O" ranger_cd


# System
#alias sus='sudo systemctl'
alias ua='~/scripts/updates -v get'
alias grub-edit='doas nvim /etc/default/grub'
alias grub-update='doas grub-mkconfig -o /boot/grub/grub.cfg'

## Functions ##
ex() {
  if [[ -f $1 ]]; then
    case $1 in
      *.tar.bz2)  tar xjf    $1  ;;
      *.tar.gz)   tar xzf    $1  ;;
      *.bz2)      bunzip2    $1  ;;
      *.rar)      rar x      $1  ;;
      *.gz)       gunzip     $1  ;;
      *.tar)      tar xf     $1  ;;
      *.tbz2)     tar xjf    $1  ;;
      *.tgz)      tar xzf    $1  ;;
      *.zip)      unzip      $1  ;;
      *.Z)        uncompress $1  ;;
      *.7z)       7z x       $1  ;;
      *)          echo "${bold_red}\"$1\" cannot be extracted via extract().${end}" ;;
    esac
  else
    echo -e "${bold_red}\"$1\" is not a valid file.${end}"
  fi
}

mksh() {
  if [[ ! -e "$1" ]]; then
    if [[ -d $(dirname "$1") ]]; then
      echo -e "#!/usr/bin/env bash\n\n" > "$1" 
      chmod +x "$1"
      if [[ "$2" = "-e" ]]; then
        neo "$1"
      fi
    fi
  fi
}

mkpy() {
  if [[ ! -e "$1" ]]; then
    if [[ -d $(dirname "$1") ]]; then
      echo -e "#!/usr/bin/env python3" > "$1"
      if [[ -n "$2" ]]; then
        echo "import $2" >> "$1"
      fi
      echo -e "\n\ndef main() -> None:\n  ...\n\nif __name__ == \"__main__\":\n  main()" >> "$1"
      chmod +x "$1"
    fi
  fi
}

mkcd() {
  if [[ ! -d $1 ]]; then
    mkdir "$1" && cd "$1" || return
  else
    cd "$1" || return
  fi
}

grepn() {
  grep -n "$1" "$2" | cut -d ":" -f 1
}

get-ip() {
  ip -f inet address show wlp1s0 | awk -F'[/ ]' '/inet/ { print $6 }'
}

# fix-pacman-nopgp() {
#   doas rm -r /var/lib/pacman/sync
#   doas pacman -Syy
# }

fix-pacman() {
  if [[ "$1" == "nopgp" ]]; then
    doas rm -r /var/lib/pacman/sync
    doas pacman -Syy
  elif [[ "$1" == "unlockdb" ]]; then
    doas rm /var/lib/pacman/db.lck
  fi
}

# weather() {
#   python -c 'import sys,requests
# city = "Curitiba"
# resp = requests.get("https://wttr.in/" + city.replace(" ", "+"))
# print(resp.text)'
# }

nmwifi() {
  case $1 in
    -l|--list)
      nmcli -f IN-USE,SSID,BARS,RATE,SECURITY device wifi list
      ;;
    -c|--connect)
      nmcli device wifi connect "$2"
      ;;
  esac
}

reload() {
  killall -q "$1"
  $1 & disown

  # if [[ "$1" == "stalonetray" ]]; then
  #   for name in stalonetray eww-bar; do
  #     xdo lower -N ${name}
  #     xdo above -N ${name} -t "$(xdo id -N Bspwm -n root)"
  #   done
  # fi
}

clone-tmp() {
  cd /tmp/ && git clone "$1"
  cd "$OLDPWD" || return
}

back-edit() {
  if [[ -f $1 ]]; then
    cp "$1" "$1.backup" && nvim "$1"
  fi
}

# reset_nvchad() {
#   rm -rf ~/.config/nvim
#   rm -rf ~/.local/share/nvim
#   rm -rf ~/.cache/nvim
#   git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
#   ln -sf ~/dotfiles/config/nvim/lua/custom ~/.config/nvim/lua/custom
#   nvim +'hi NormalFloat guibg=#1e222a' +NvChadUpdate
# }

zipf() {
  path="$1"
  zip "$(dirname "$path")" "$2"
}

cleanup() {
  if [[ -n "$(pacman -Qtdq)" ]]; then
    doas pacman -Rns $(pacman -Qtdq)
  else
    echo -e "             No orphans?
     ${blue}\r    ⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝
            \r    ⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇
            \r    ⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀
            \r    ⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀ 
            \r    ⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀${end}"
  fi
  doas paccache -r
  trash-empty
}


## Miscellaneous ##
alias rr='curl -s -L http://bit.ly/10hA8iC | bash'
alias tf='cd /mnt/steam/SteamLibrary/steamapps/common/Team\ Fortress\ 2/tf/'

fieplogin() {
  cd $HOME/dev/fieplogin/
  source venv/bin/activate
  python main.py
  deactivate
  cd $OLDPATH
}

# start-server() {
#   SERVER_PATH="/home/broa/.games/$(grep "$1" <<< "$(ls ~/.games)")"
#   [[ -d $SERVER_PATH ]] && cd "$SERVER_PATH" &&
#   java -Xms1G -Xmx1G -jar server.jar --nogui &&
#   cd "$OLDPWD" || return
# }

# init-ngrok() {
#   [[ -n "$(pidof ngrok)" ]] && killall -s SIGKILL ngrok
#   sh -c "ngrok tcp --region=sa 25565 &"
#   sleep 1
#   curl -s localhost:4040/api/tunnels | jq '.tunnels[0]["public_url"]' | \
#   awk -F'["/]' '{print $(NF-1)}' | clipboard
# }

video-wallpaper() {
  VIDEO_PATH="/tmp/video.webm"
  [[ -f "$VIDEO_PATH" ]] && rm 
  ytdl -o "$VIDEO_PATH" "$1" &&
  mpvpaper -f -o "no-audio loop --speed=3" eDP-1 "$VIDEO_PATH"
}

# grapejuice-fixes() {
#   [[ -e /tmp/install.py ]] && rm /tmp/install.py
#   curl https://pastebin.com/raw/5SeVb005 -o /tmp/install.py
#   python /tmp/install.py
# }

compress-mkv() {
  FILE_NAME="$(awk -F. '{print $1}' <<< "$1")"
  gamemoderun ffmpeg -i "$1" -vcodec libx265 -crf 28 "${FILE_NAME}.mp4" 
}

venv() {
  if [[ "$1" = "create" ]]; then
    python -m virtualenv venv
  elif [[ "$1" = "init" ]]; then
    source venv/bin/activate
  fi
}

# rm-shader-cache() {
#   STEAM_PATH="$HOME/.local/share/Steam"
#   STEAMAPPS_PATH="$STEAM_PATH/steamapps"
#   SHADER_PATH="$STEAMAPPS_PATH/shadercache"
#
#   declare -A GAMES
#   for i in $(ls $SHADER_PATH); do
#     GAMES[$i]="$(awk -F\" '/name/ {print $4}' "$STEAMAPPS_PATH/appmanifest_${i}.acf")"
#   done
#   
#   echo 1
#   APPID=$(for key in "${!GAMES[@]}"; do echo "$key: ${GAMES[${key}]}"; done | fzf --prompt="Selecione um jogo: " | awk -F: '{print $1}')
#   echo 2
#   if [[ -n "$APPID" ]]; then
#     rm -rf "$SHADER_PATH/$APPID"
#     echo "Shader cache from ${GAMES[$APPID]} (${APPID}) removed."
#   else
#     echo "Shader cache doesn't exists"
#   fi
# }
