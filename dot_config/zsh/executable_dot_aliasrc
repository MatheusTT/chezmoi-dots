#!/usr/bin/env bash

source /home/broa/scripts/colors.conf

## Aliases ##
# Utility commands
alias ls='lsd -X --group-dirs first'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'

alias mkdir='printf "${bold_green}" && mkdir -pv'
alias back='cd $OLDPWD'
alias :q='exit'

# System
alias grub-edit='doas nvim /etc/default/grub'
alias grub-update='doas grub-mkconfig -o /boot/grub/grub.cfg'
alias ua='~/scripts/updates -v get'

# Other commands
alias neo='nvim'
alias bat='bat --number --theme Dracula'
alias cat='bat -p'
alias wget='wget --hsts-file=${XDG_DATA_HOME}/.wget-hsts'
alias clipboard='wl-copy'
alias ytdl='yt-dlp -f "bv*+ba/b" -o "~/Downloads/%(title)s.%(ext)s"'
alias ytdla='yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 -o "~/Downloads/%(title)s.%(ext)s"'
alias rm='trash'
alias ip='ip --color=auto'
alias close='killall -s SIGTERM'
alias set-xbg='feh --no-fehbg --bg-fill'
alias set-wbg='swaybg -i'
alias sticky='flameshot gui -s --pin'
alias gdu='gdu --si'
alias rr='curl -s -L http://bit.ly/10hA8iC | bash'

# GIT Aliases
alias gits='git status'
alias gita='git add'
alias gitd='git diff'
alias gitr='git restore'
alias gitrs='git restore --staged'

giti() {
  echo "$1" >>"$PWD/.gitignore"
}

clone-tmp() {
  cd /tmp/ && git clone "$@"
  cd "$OLDPWD" || return
}

## Functions ##
y() {
  TMP="$(mktemp -t yazi-cwd.XXXXX)"
  yazi --cwd-file "$TMP" "$@"
  if [[ -f "$TMP" ]]; then
    cd "$(cat "$TMP")" || return
    rm "$TMP"
  fi
}

mnt-pendrive() {
  sudo chmod 777 /mnt/pendrive
  sudo mount -o uid=1000,gid=1000 "$1" /mnt/pendrive
}

mkcd() {
  if [[ ! -d $1 ]]; then
    mkdir "$1" && cd "$1" || return
  else
    cd "$1" || return
  fi
}

grepn() {
  grep -n "$1" "$2" | cut -d ":" -f 1
}

get-ip() {
  ip -f inet address show wlp1s0 | awk -F'[/ ]' '/inet/ { print $6 }'
}

fix-pacman() {
  if [[ "$1" == "nopgp" ]]; then
    doas rm -r /var/lib/pacman/sync
    doas pacman -Syy
  elif [[ "$1" == "unlockdb" ]]; then
    doas rm /var/lib/pacman/db.lck
  fi
}

nmwifi() {
  case $1 in
  l | list | -l | --list)
    nmcli device wifi list
    ;;
  c | connect | -c | --connect)
    nmcli device wifi connect "$2"
    ;;
  esac
}

bt() {
  [[ -n "$2" ]] && MAC_ADRESS="$(bluetoothctl devices | grep "$2" | awk '{print $2}')"
  case $1 in
  l | list)
    bluetoothctl devices
    ;;
  lc | list-connected)
    bluetoothctl devices Connected
    ;;
  c | connect)
    bluetoothctl connect "$MAC_ADRESS"
    ;;
  d | disconnect)
    bluetoothctl disconnect "$MAC_ADRESS"
    ;;
  t | toggle)
    DEVICES_CONNECTED="$(bluetoothctl devices Connected | awk '{print $2}')"
    if grep -q "$MAC_ADRESS" <<<"${DEVICES_CONNECTED[@]}"; then
      bluetoothctl disconnect "$MAC_ADRESS"
    else
      bluetoothctl connect "$MAC_ADRESS"
    fi
    ;;
  esac
}

reload() {
  killall -q "$1"
  "$@" &
  disown
}

back-edit() {
  if [[ -f $1 ]]; then
    cp "$1" "$1.backup" && nvim "$1"
  fi
}

cleanup() {
  if [[ -n "$(pacman -Qtdq)" ]]; then
    doas pacman -Rns $(pacman -Qtdq)
  else
    echo -e "             No orphans?
     ${blue}\r    ⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝
            \r    ⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇
            \r    ⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀
            \r    ⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀ 
            \r    ⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            \r    ⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀${end}"
  fi
  doas paccache -r
  trash-empty
}

video-wallpaper() {
  VIDEO_PATH="/tmp/video.webm"
  [[ -f "$VIDEO_PATH" ]] && rm
  ytdl -o "$VIDEO_PATH" "$1" &&
    mpvpaper -f -o "no-audio loop --speed=3" eDP-1 "$VIDEO_PATH"
}

## Programing ##
# Bash
mksh() {
  if [[ ! -e "$1" ]]; then
    if [[ -d $(dirname "$1") ]]; then
      echo -e "#!/usr/bin/env bash\n\n" >"$1"
      chmod +x "$1"
      if [[ "$2" = "-e" ]]; then
        neo "$1"
      fi
    fi
  fi
}

# Python
mkpy() {
  if [[ ! -e "$1" ]]; then
    if [[ -d $(dirname "$1") ]]; then
      echo -e "#!/usr/bin/env python3" >"$1"
      if [[ -n "$2" ]]; then
        echo "import $2" >>"$1"
      fi
      echo -e "\n\ndef main() -> None:\n  ...\n\nif __name__ == \"__main__\":\n  main()" >>"$1"
      chmod +x "$1"
    fi
  fi
}

venv() {
  if [[ "$1" = "create" ]]; then
    python -m virtualenv venv
  elif [[ "$1" = "init" ]]; then
    source "venv/bin/activate"
  fi
}
