#!/bin/bash

# Colors
END="\033[0m"
GREEN="\033[1;32m"
BLUE="\033[0;34m"

## Aliases ##
# Utility commands
alias ls='lsd -X --group-dirs first'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'

alias mkdir='printf "${GREEN}" && mkdir -pv'
alias back='cd $OLDPWD'
alias :q='exit'

# System
alias grub-edit='doas nvim /etc/default/grub'
alias grub-update='doas grub-mkconfig -o /boot/grub/grub.cfg'
alias ua='~/scripts/updates -v get'

# Other commands
alias neo='nvim'
alias bat='bat --number --theme Dracula'
alias cat='bat -p'
alias wget='wget --hsts-file=${XDG_DATA_HOME}/.wget-hsts'
alias clipboard='wl-copy'
alias ytdl='yt-dlp -f "bv*+ba/b" -o "~/Downloads/%(title)s.%(ext)s"'
alias ytdla='yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 -o "~/Downloads/%(title)s.%(ext)s"'
alias rm='trash'
alias ip='ip --color=auto'
alias close='killall -s SIGTERM'
alias set-xbg='feh --no-fehbg --bg-fill'
alias set-wbg='swaybg -i'
alias sticky='flameshot gui -s --pin'
alias gdu='gdu --si'
alias rr='curl -sL http://bit.ly/10hA8iC | bash'

# GIT Aliases
alias gits='git status'
alias gitss='git status --short'
alias gita='git add'
alias gitd='git diff'
alias gitr='git restore'
alias gitrs='git restore --staged'

giti() {
  echo "$1" >>"$PWD/.gitignore"
}

# Interactive git diff
gitdfzf() {
  [[ -d ".git" ]] || return
  diff_file="$(git status --short | awk '/^.M/ {print $NF}' | fzf \
    --preview="git diff --color=always {}" \
    --bind "ctrl-a:execute(git add {})+reload(git status --short | awk '/^.M/ {print \$NF}')")"
  if [[ -n "$diff_file" ]]; then
    neo "$diff_file"
    printf "Add file? (y/n)" && read -r addfile
    [[ "$addfile" = "y" ]] && git add "$diff_file"
  fi
}

clone-tmp() {
  cd /tmp/ && git clone "$@"
  cd "$OLDPWD" || return
}

## Functions ##
y() {
  tmp="$(mktemp -t yazi-cwd.XXXXX)"
  yazi --cwd-file "$tmp" "$@"
  cd "$(cat "$tmp")" || return
  /bin/rm "$tmp"
}

mnt-pendrive() {
  sudo chmod 777 /mnt/pendrive
  sudo mount -o uid=1000,gid=1000 "$1" /mnt/pendrive
}

mkcd() {
  [[ ! -d $1 ]] && mkdir "$1"
  cd "$1" || return
}

grepn() {
  grep -n "$1" "$2" | cut -d ":" -f 1
}

get-ip() {
  ip -f inet address show wlp1s0 | awk -F'[/ ]' '/inet/ { print $6 }'
}

fix-pacman() {
  if [[ "$1" == "nopgp" ]]; then
    doas rm -r /var/lib/pacman/sync
    doas pacman -Syy
  elif [[ "$1" == "unlockdb" ]]; then
    doas rm /var/lib/pacman/db.lck
  fi
}

nmwifi() {
  case $1 in
  l | list | -l | --list)
    nmcli device wifi list
    ;;
  c | connect | -c | --connect)
    nmcli device wifi connect "$2"
    ;;
  esac
}

bt() {
  [[ -n "$2" ]] && MAC_ADRESS="$(bluetoothctl devices | grep "$2" | awk '{print $2}')"
  case $1 in
  l | list)
    bluetoothctl devices
    ;;
  lc | list-connected)
    bluetoothctl devices Connected
    ;;
  c | connect)
    bluetoothctl connect "$MAC_ADRESS"
    ;;
  d | disconnect)
    bluetoothctl disconnect "$MAC_ADRESS"
    ;;
  t | toggle)
    DEVICES_CONNECTED="$(bluetoothctl devices Connected | awk '{print $2}')"
    if grep -q "$MAC_ADRESS" <<<"${DEVICES_CONNECTED[@]}"; then
      bluetoothctl disconnect "$MAC_ADRESS"
    else
      bluetoothctl connect "$MAC_ADRESS"
    fi
    ;;
  esac
}

reload() {
  killall -q "$1"
  "$@" &
  disown
}

back-edit() {
  if [[ -f $1 ]]; then
    cp "$1" "$1.backup" && nvim "$1"
  fi
}

cleanup() {
  ID="$(awk -F= '/^ID=/ {gsub("\"","");print $2}' /etc/os-release)"
  if [[ "$ID" == "arch" ]]; then
    if [[ -n "$(pacman -Qtdq)" ]]; then
      # shellcheck disable=SC2046
      doas pacman -Rns $(pacman -Qtdq)
    else
      echo -e "             No orphans?
        ${BLUE}\r    ⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝
               \r   ⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇
               \r   ⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀
               \r   ⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀⠀
               \r   ⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
               \r   ⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀${END}"
    fi
    doas paccache -r
  elif [[ "$ID" == "void" ]]; then
    doas xbps-remove -Oo
  fi
  flatpak remove --unused
  docker image prune
  trash-empty
}

video-wallpaper() {
  VIDEO_PATH="/tmp/video.webm"
  [[ -f "$VIDEO_PATH" ]] && rm "$VIDEO_PATH"
  ytdl -o "$VIDEO_PATH" "$1" &&
    mpvpaper -f -o "no-audio loop --speed=3" eDP-1 "$VIDEO_PATH"
}

## Programing ##
# Bash
mksh() {
  if [[ ! -e "$1" ]]; then
    if [[ -d $(dirname "$1") ]]; then
      echo -e "#!/bin/bash\n\n" >"$1"
      chmod +x "$1"
      if [[ "$2" = "-e" ]]; then
        neo "$1"
      fi
    fi
  fi
}

# Dev Script
# shellcheck disable=SC1091
source "$HOME/scripts/dev"
